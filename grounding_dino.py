# -*- coding: utf-8 -*-
"""Grounding Dino

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1USssUyU80_edOmMnjzt1d9Y1I9LnRrlD

## Verify GPU is available

### Missing Command?

If the `nvidia-smi` commands response is `command not found` then you need to change the runtime as follows:

1. Click `Runtime` in the menu
2. Click `Change runtime type`
3. Set hardware accelerator to `GPU`
4. Specify the GPU Type
5. Press `Save`

### nvidia-smi command
"""

!nvidia-smi

"""## Create variable to current working directory

"""

import os
HOME = os.getcwd()
print(HOME)

"""## Download and install Grounding DINO"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!git clone https://github.com/IDEA-Research/GroundingDINO.git
# %cd {HOME}/GroundingDINO
!pip install -q -e .
!pip install supervision

"""## Download Weights"""

# Commented out IPython magic to ensure Python compatibility.
!mkdir {HOME}/weights
# %cd {HOME}/weights

!wget -q https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth

"""## Download Example Images"""

# Commented out IPython magic to ensure Python compatibility.
import locale
locale.getpreferredencoding = lambda: "UTF-8"

# %cd {HOME}
!mkdir {HOME}/data
# %cd {HOME}/data
!wget -O compass.jpg -q https://unsplash.com/photos/xu2WYJek5AI/download?ixid=M3wxMjA3fDB8MXxzZWFyY2h8MTV8fGNvbXBhc3N8ZW58MHx8fHwxNjg5MTc2NzMyfDA&force=true&w=960
!wget -O air.jpg -q https://unsplash.com/photos/AlA8S9tALAs/download?ixid=M3wxMjA3fDB8MXxzZWFyY2h8MTR8fHBhcmFjaHV0ZXxlbnwwfHx8fDE2ODkwOTU1MTJ8MA&force=true&w=960
!wget -O ocean.jpg -q https://unsplash.com/photos/1PWhYZ_erME/download?ixid=M3wxMjA3fDB8MXxhbGx8fHx8fHx8fHwxNjg5MDA2MTk5fA&force=true&w=960
!wget -O snow.jpg -q https://unsplash.com/photos/MB1FuEh0AzU/download?ixid=M3wxMjA3fDB8MXxzZWFyY2h8NHx8c25vd2JvYXJkZXJzfGVufDB8MHx8fDE2ODkwMTk0NTB8MA&force=true&w=960
!wget -O hardware.jpg -q https://unsplash.com/photos/lllK4-63KTw/download?ixid=M3wxMjA3fDB8MXxzZWFyY2h8Mnx8Ym9sdCUyMGFuZCUyMHdhc2hlcnxlbnwwfHx8fDE2ODkxNzg1NTN8MA&force=true&w=960

"""## Load Grounding DINO model"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}/GroundingDINO
from groundingdino.util.inference import load_model, load_image, predict, annotate

model = load_model(f"{HOME}/GroundingDINO/groundingdino/config/GroundingDINO_SwinT_OGC.py",
                   f"{HOME}/weights/groundingdino_swint_ogc.pth")

"""## Object Detection (Compass)"""

# Commented out IPython magic to ensure Python compatibility.
import os
import supervision as sv

IMAGE_NAME = "/content/hghfh.png"
IMAGE_PATH = os.path.join(HOME, "data", IMAGE_NAME)

TEXT_PROMPT = "boy with spectacles"
BOX_TRESHOLD = 0.4
TEXT_TRESHOLD = 0.25

image_source, image = load_image(IMAGE_PATH)

boxes, logits, phrases = predict(
    model=model,
    image=image,
    caption=TEXT_PROMPT,
    box_threshold=BOX_TRESHOLD,
    text_threshold=TEXT_TRESHOLD
)

annotated_frame = annotate(image_source=image_source, boxes=boxes, logits=logits, phrases=phrases)

# %matplotlib inline
sv.plot_image(annotated_frame, (16, 16))

"""## Object Detection (parachutes)"""

# Commented out IPython magic to ensure Python compatibility.
import os
import supervision as sv

IMAGE_NAME = "air.jpg"
IMAGE_PATH = os.path.join(HOME, "data", IMAGE_NAME)

TEXT_PROMPT = "parachutes"
BOX_TRESHOLD = 0.35
TEXT_TRESHOLD = 0.25

image_source, image = load_image(IMAGE_PATH)

boxes, logits, phrases = predict(
    model=model,
    image=image,
    caption=TEXT_PROMPT,
    box_threshold=BOX_TRESHOLD,
    text_threshold=TEXT_TRESHOLD
)

annotated_frame = annotate(image_source=image_source, boxes=boxes, logits=logits, phrases=phrases)

# %matplotlib inline
sv.plot_image(annotated_frame, (16, 16))

# Commented out IPython magic to ensure Python compatibility.
import os
import supervision as sv

IMAGE_NAME = "ocean.jpg"
IMAGE_PATH = os.path.join(HOME, "data", IMAGE_NAME)

TEXT_PROMPT = "surfers"
BOX_TRESHOLD = 0.35
TEXT_TRESHOLD = 0.25

image_source, image = load_image(IMAGE_PATH)

boxes, logits, phrases = predict(
    model=model,
    image=image,
    caption=TEXT_PROMPT,
    box_threshold=BOX_TRESHOLD,
    text_threshold=TEXT_TRESHOLD
)

annotated_frame = annotate(image_source=image_source, boxes=boxes, logits=logits, phrases=phrases)

# %matplotlib inline
sv.plot_image(annotated_frame, (16, 16))

# Commented out IPython magic to ensure Python compatibility.
import os
import supervision as sv
import time

IMAGE_NAME = "snow.jpg"
IMAGE_PATH = os.path.join(HOME, "data", IMAGE_NAME)

TEXT_PROMPT = "snowboarder"
BOX_TRESHOLD = 0.35
TEXT_TRESHOLD = 0.25

image_source, image = load_image(IMAGE_PATH)
start = time.time()
boxes, logits, phrases = predict(
    model=model,
    image=image,
    caption=TEXT_PROMPT,
    box_threshold=BOX_TRESHOLD,
    text_threshold=TEXT_TRESHOLD
)
end = time.time()
print(end - start)

annotated_frame = annotate(image_source=image_source, boxes=boxes, logits=logits, phrases=phrases)

# %matplotlib inline
sv.plot_image(annotated_frame, (16, 16))